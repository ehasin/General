import random
import copy

class xo(object):   
    def __init__(self, *args):
        self.boardsize = args[0]
        self.wincret = args[1]
        self.playerJustMoved = 2
        self.board = [[0 for x in range(self.boardsize)] for y in range(self.boardsize)] 
        self.gameOn = 1
        self.winner = 0

    def __str__(self):
        dictionary = [' ','X','O']
        res = ''
        for i in range(self.boardsize):
            res = res + '|'
            for j in range(self.boardsize):
               res = res + dictionary[self.board[i][j]] + '|'
            res = res + '\n'
        if self.gameOn == 0:
            outcome = 'draw'
            if self.winner != 0:
                outcome = 'player ' + str(self.winner) + ' won!'
            res = res + 'outcome: ' + outcome
        return res
    
    def __repr__(self):
        res = 's:['
        for i in range(self.boardsize):
            for j in range(self.boardsize):
                res = res + str(self.board[i][j])
            if i < self.boardsize:
                res = res + '|'
            else:
                res = res + ']'
        res = res + '; game:' + str(self.gameOn) + '; win:' + str(self.winner) + '; '
        return res
    
    def getValidMoves(self):
        res = []
        for i in range(self.boardsize):
            for j in range(self.boardsize):
                if self.board[i][j] == 0: res.append([i,j])
        return res
    
    def checkOutcome(self):
        if not self.getValidMoves(): 
            self.gameOn = 0
        chkhor = [0]*(self.boardsize)
        chkver = [0]*(self.boardsize)
        chkdiags = [0]*2
        for i in range(self.boardsize):
            for j in range(self.boardsize):
                #print(str([i,j]))
                chkhor[i] = chkhor[i] + (self.board[i][j] == self.playerJustMoved)
                chkver[j] = chkver[j] + (self.board[i][j] == self.playerJustMoved)
                if i == j: 
                    chkdiags[0] = chkdiags[0] + (self.board[i][j] == self.playerJustMoved)
                if i == self.boardsize - j - 1: 
                    chkdiags[1] = chkdiags[1] + (self.board[i][j] == self.playerJustMoved)
        if max([max(chkhor),max(chkver),max(chkdiags)]) >= self.wincret:
            self.gameOn = 0
            self.winner = self.playerJustMoved
            
    def makeMove(self,move):
        #if move in self.getValidMoves():
        self.playerJustMoved = 3 - self.playerJustMoved
        self.board[move[0]][move[1]] = self.playerJustMoved
        outcome = self.checkOutcome()
	
    def makeCopy(self):
        res = copy.deepcopy(self)
        return res


class node():
    def __init__(self,state):
        self.state = state
        self.parent = nothing
        self.nodeScore = 0
        self.childNodes = []
        self.validMoves = []
        self.executedMoves = []
        
    def __str__(self):
        res = 's:' + repr(self.state)
        res = res + 'Moves: ' + self.state.getValidMoves() + '\n'
	
    def selectMove(self):
        validMoves = self.state.getValidMoves()
        nextMoveIndex = random.randrange(len(validMoves))
        nextMove = validMoves[nextMoveIndex]
    
    def executeMove(self,move):
        childNode = copy.deepcopy(self)
        #childNode.state = self.state.makeCopy()
        childNode.state.makeMove(move)
        childnode.parentNode = self
        s
        self.childNodes.append(childNode)
        
    
def run():
    state = xo(3,3) # boardsize, winning criteria
    print(repr(state))
    counter = 0
    while counter <= 1000 and state.gameOn == 1:
        counter +=1
        validMoves = state.getValidMoves()
        nextMoveIndex = random.randrange(len(validMoves))
        nextMove = validMoves[nextMoveIndex]
        state.makeMove(nextMove)
        print(repr(state))
        
run()
